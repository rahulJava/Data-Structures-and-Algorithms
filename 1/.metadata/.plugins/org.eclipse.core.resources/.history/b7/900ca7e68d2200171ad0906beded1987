package SinglyLinkedList;

import java.util.HashMap;
import java.util.Map;

public class SinglyLinkedList
{

	private  Node first;
	//private Node last;
	 public boolean isEmpty(){
	        return (first == null);
	    }
	  public SinglyLinkedList(){
	         
	    }
	     
	public void insertFirst(int data)
	{
		Node n1 = new Node();
		n1.data=data;
		n1.next=first;
		first = n1;
		//System.out.println(isEmpty());
	}
	
	 public Node deleteFirst(){
		 if(first.next==null)
		 {
			 System.out.println("next is null");
		 }
		 Node temp = first;
	        first = first.next;
	        return temp;
	    }
	
	public void displayLinkedList()
	{
		Node currentNode = first;
		while(currentNode!=null)
		{
			currentNode.displayNode(); 
			currentNode=currentNode.next;
			
		}
	}
	public void insertAtTheEnd(int data)
	{
		Node lastNode =first;
		while(lastNode.next!=null)
		{
			lastNode=lastNode.next;
		}
			Node new1 = new Node();
			new1.data=data;
		lastNode.next= new1;
		//lastNode.data=data;
	}
	
	public static  void commonElement(SinglyLinkedList list1, SinglyLinkedList list2) {

		list1.displayLinkedList();
		list2.displayLinkedList();
		Node temp1 =  list1.first;

		Node temp2 = list2.first;
		
		
	
		Node print = new Node();
		Node head = print;
		
		
		while (temp1 != null && temp2 != null) {

			System.out.println(temp1.data+"=="+temp2.data);
			if (temp1.data == temp2.data) {
				System.out.println("If Equals");
				Node n1 = new Node();
				System.out.println("temp data adding:"+temp1.data);
				n1.data=temp1.data;
				head.next = n1; // Copy common element.

				temp1 = temp1.next;

				temp2 = temp2.next;

				head = head.next;

			} else if (temp1.data > temp2.data) {

				System.out.println("Inside first if condition:"+temp1.data+" temp1.data:"+temp2.data+" temp2.data");
				temp2 = temp2.next;	

			} else { // list1.data < list2.data

				temp1 = temp1.next;	

			}

		}

		System.out.println("----------------------");
		while(print!=null)
		{
			
			print.displayNode(); 
			print=print.next;
			
		}
		
	

	}
	
	public static void removeDuplicates(SinglyLinkedList list)
	{
		Node n1 = list.first;
		//list.displayLinkedList();
		if(n1==null || n1.next==null)
		{
			System.out.println("List have zero or one node");
		}
		Node curr ;
		Node prev;
		while(n1!=null)
		{
			
			curr=n1.next;
			prev=n1;
			System.out.println("first while:"+prev.data);
			//System.out.println("-----");
			//System.out.println("data:"+curr.next.data);
			while(curr!=null)
			{System.out.println("second while");
			System.out.println("current data:"+curr.data);
			System.out.println("previous data:"+prev.data);
				//System.out.println("Inside nested while");
				if(curr.data==prev.data)
				{
					
					//System.out.println("inside nested if");
					prev.next=curr.next;
				}
				prev=curr;
				curr=curr.next;
				
			}
			System.out.println("Outside while");
			n1=n1.next;
		}
		System.out.println("display genuine list");
		list.displayLinkedList();
	}
	
	
	public static void removeDuplicates1(SinglyLinkedList list1)
	{
		Map<Integer,Boolean> mapper = new HashMap<Integer, Boolean>();
		Node  curr=list1.first;
		Node next1;
		while(curr.next!=null)
		{
			next1=curr.next;
			if(mapper.get(next1.data)!=null)
			{
				curr.next=next1.next;
			}
			else
			{
				System.out.println("logger:"+next1.data);
				mapper.put(next1.data, true);
				curr=curr.next;
			}
		}
			list1.displayLinkedList();
		
	}
}
